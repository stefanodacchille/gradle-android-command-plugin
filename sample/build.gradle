buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
        // To depend on the deployed version of the plugin add the following line here:
        // classpath 'com.novoda:gradle-android-command-plugin:1.1.0-SNAPSHOT'
    }
}
apply plugin: 'android'
apply plugin: 'android-command'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
    }

    buildTypes {
        debug {}
        release {}
        QA {}
    }

    productFlavors {

        flavorDimensions "pricing", "releaseType"

        beta {
            flavorDimension "releaseType"
        }

        normal {
            flavorDimension "releaseType"
        }

        free {
            flavorDimension "pricing"
        }

        paid {
            flavorDimension "pricing"
        }
    }

    command {
        deviceId {
            def minSdkDevices = attachedDevices().findResults { deviceId ->
                def sdkVersion = "$adb -s $deviceId shell getprop ro.build.version.sdk".execute()
                int sdkInt = sdkVersion.text.toInteger()
                sdkInt >= defaultConfig.minSdkVersion ? deviceId : null
            }
            if (minSdkDevices.isEmpty()) {
                throw new IllegalStateException("No device found with minSdk " + defaultConfig.minSdkVersion)
            }
            minSdkDevices[0]
        }

        events 1000
        tasks("instHudl", com.novoda.gradle.command.Install) {
            deviceId {
                def hudlDevices = attachedDevicesWithBrand('hudl')
                if (!hudlDevices) {
                    throw new IllegalStateException("No hudl devices found")
                }
                hudlDevices[0]
            }
        }

        pushLocalFileName "${rootProject.projectDir.path}/resources/novoda.jpg"
        pushRemoteFileName '/sdcard/Pictures/novoda.jpg'

        pullRemoteFileName '/sdcard/Pictures/novoda.jpg'
        pullLocalFileName "${rootProject.projectDir.path}/resources/novoda-copy.jpg"


        tasks("pushProperties", com.novoda.gradle.command.Push) {
            remote "/sdcard/test.properties"
            local file("test_push.properties").absolutePath
        }
        tasks("pullProperties", com.novoda.gradle.command.Pull) {
            remote "/sdcard/test.properties"
            local file("test_pulled.properties").absolutePath
        }
    }
}
